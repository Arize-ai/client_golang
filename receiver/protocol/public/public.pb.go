//
// Recompile with: ./scripts/recompile_protos.sh

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.11.4
// source: receiver/protocol/public/public.proto

package public

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Denotes the
// environment of the data being uploaded.
type FileHeader_Environment int32

const (
	FileHeader_UNKNOWN    FileHeader_Environment = 0
	FileHeader_TRAINING   FileHeader_Environment = 1
	FileHeader_VALIDATION FileHeader_Environment = 2
	FileHeader_PRODUCTION FileHeader_Environment = 3
)

// Enum value maps for FileHeader_Environment.
var (
	FileHeader_Environment_name = map[int32]string{
		0: "UNKNOWN",
		1: "TRAINING",
		2: "VALIDATION",
		3: "PRODUCTION",
	}
	FileHeader_Environment_value = map[string]int32{
		"UNKNOWN":    0,
		"TRAINING":   1,
		"VALIDATION": 2,
		"PRODUCTION": 3,
	}
)

func (x FileHeader_Environment) Enum() *FileHeader_Environment {
	p := new(FileHeader_Environment)
	*p = x
	return p
}

func (x FileHeader_Environment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileHeader_Environment) Descriptor() protoreflect.EnumDescriptor {
	return file_receiver_protocol_public_public_proto_enumTypes[0].Descriptor()
}

func (FileHeader_Environment) Type() protoreflect.EnumType {
	return &file_receiver_protocol_public_public_proto_enumTypes[0]
}

func (x FileHeader_Environment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileHeader_Environment.Descriptor instead.
func (FileHeader_Environment) EnumDescriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{12, 0}
}

//
// Denotes the environment of the data being uploaded.
type Schema_Environment int32

const (
	Schema_UNKNOWN_ENVIRONMENT Schema_Environment = 0
	Schema_TRAINING            Schema_Environment = 1
	Schema_VALIDATION          Schema_Environment = 2
	Schema_PRODUCTION          Schema_Environment = 3
)

// Enum value maps for Schema_Environment.
var (
	Schema_Environment_name = map[int32]string{
		0: "UNKNOWN_ENVIRONMENT",
		1: "TRAINING",
		2: "VALIDATION",
		3: "PRODUCTION",
	}
	Schema_Environment_value = map[string]int32{
		"UNKNOWN_ENVIRONMENT": 0,
		"TRAINING":            1,
		"VALIDATION":          2,
		"PRODUCTION":          3,
	}
)

func (x Schema_Environment) Enum() *Schema_Environment {
	p := new(Schema_Environment)
	*p = x
	return p
}

func (x Schema_Environment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Schema_Environment) Descriptor() protoreflect.EnumDescriptor {
	return file_receiver_protocol_public_public_proto_enumTypes[1].Descriptor()
}

func (Schema_Environment) Type() protoreflect.EnumType {
	return &file_receiver_protocol_public_public_proto_enumTypes[1]
}

func (x Schema_Environment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Schema_Environment.Descriptor instead.
func (Schema_Environment) EnumDescriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{13, 0}
}

type Schema_ModelType int32

const (
	Schema_UNKNOWN_MODELTYPE Schema_ModelType = 0
	Schema_BINARY            Schema_ModelType = 1
	Schema_NUMERIC           Schema_ModelType = 2
	Schema_CATEGORICAL       Schema_ModelType = 3
	Schema_SCORE_CATEGORICAL Schema_ModelType = 4
)

// Enum value maps for Schema_ModelType.
var (
	Schema_ModelType_name = map[int32]string{
		0: "UNKNOWN_MODELTYPE",
		1: "BINARY",
		2: "NUMERIC",
		3: "CATEGORICAL",
		4: "SCORE_CATEGORICAL",
	}
	Schema_ModelType_value = map[string]int32{
		"UNKNOWN_MODELTYPE": 0,
		"BINARY":            1,
		"NUMERIC":           2,
		"CATEGORICAL":       3,
		"SCORE_CATEGORICAL": 4,
	}
)

func (x Schema_ModelType) Enum() *Schema_ModelType {
	p := new(Schema_ModelType)
	*p = x
	return p
}

func (x Schema_ModelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Schema_ModelType) Descriptor() protoreflect.EnumDescriptor {
	return file_receiver_protocol_public_public_proto_enumTypes[2].Descriptor()
}

func (Schema_ModelType) Type() protoreflect.EnumType {
	return &file_receiver_protocol_public_public_proto_enumTypes[2]
}

func (x Schema_ModelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Schema_ModelType.Descriptor instead.
func (Schema_ModelType) EnumDescriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{13, 1}
}

//
// BulkRecord collects a set of actuals or predictions objects which are
// reconstructed server side into Records for downstream processing
type BulkRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Uniquely identifies the user account in our system
	//
	// Deprecated: Do not use.
	OrganizationKey string `protobuf:"bytes,1,opt,name=organization_key,json=organizationKey,proto3" json:"organization_key,omitempty"`
	//
	// model_id is a user-defined field that should be unique within their account
	// and will be used to group together a set of predictions and actuals
	ModelId string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	//
	// model_version is a user-defined field that will be used to group together a subset of predictions and actuals
	// for a given model_id
	ModelVersion string    `protobuf:"bytes,3,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
	Records      []*Record `protobuf:"bytes,5,rep,name=records,proto3" json:"records,omitempty"`
	//
	// Uniquely identifies the user account in our system
	SpaceKey string `protobuf:"bytes,6,opt,name=space_key,json=spaceKey,proto3" json:"space_key,omitempty"`
}

func (x *BulkRecord) Reset() {
	*x = BulkRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkRecord) ProtoMessage() {}

func (x *BulkRecord) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkRecord.ProtoReflect.Descriptor instead.
func (*BulkRecord) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Do not use.
func (x *BulkRecord) GetOrganizationKey() string {
	if x != nil {
		return x.OrganizationKey
	}
	return ""
}

func (x *BulkRecord) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *BulkRecord) GetModelVersion() string {
	if x != nil {
		return x.ModelVersion
	}
	return ""
}

func (x *BulkRecord) GetRecords() []*Record {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *BulkRecord) GetSpaceKey() string {
	if x != nil {
		return x.SpaceKey
	}
	return ""
}

//
// Record is the top level type that we receive from our
// integrations
type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Uniquely identifies the user account in our system
	//
	// Deprecated: Do not use.
	OrganizationKey string `protobuf:"bytes,1,opt,name=organization_key,json=organizationKey,proto3" json:"organization_key,omitempty"`
	//
	// model_id is a user-defined field that should be unique within their account
	// and will be used to group together a set of predictions and actuals
	ModelId string `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	//
	// prediction_id is a user-defined field that should be unique to this prediction
	// and will be used to identify this prediction as well as link it with
	// latent actuals data
	PredictionId        string               `protobuf:"bytes,3,opt,name=prediction_id,json=predictionId,proto3" json:"prediction_id,omitempty"`
	Prediction          *Prediction          `protobuf:"bytes,8,opt,name=prediction,proto3" json:"prediction,omitempty"`
	Actual              *Actual              `protobuf:"bytes,9,opt,name=actual,proto3" json:"actual,omitempty"`
	FeatureImportances  *FeatureImportances  `protobuf:"bytes,10,opt,name=feature_importances,json=featureImportances,proto3" json:"feature_importances,omitempty"`
	PredictionAndActual *PredictionAndActual `protobuf:"bytes,11,opt,name=prediction_and_actual,json=predictionAndActual,proto3" json:"prediction_and_actual,omitempty"`
	//
	// Uniquely identifies the user account in our system
	SpaceKey string `protobuf:"bytes,12,opt,name=space_key,json=spaceKey,proto3" json:"space_key,omitempty"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{1}
}

// Deprecated: Do not use.
func (x *Record) GetOrganizationKey() string {
	if x != nil {
		return x.OrganizationKey
	}
	return ""
}

func (x *Record) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *Record) GetPredictionId() string {
	if x != nil {
		return x.PredictionId
	}
	return ""
}

func (x *Record) GetPrediction() *Prediction {
	if x != nil {
		return x.Prediction
	}
	return nil
}

func (x *Record) GetActual() *Actual {
	if x != nil {
		return x.Actual
	}
	return nil
}

func (x *Record) GetFeatureImportances() *FeatureImportances {
	if x != nil {
		return x.FeatureImportances
	}
	return nil
}

func (x *Record) GetPredictionAndActual() *PredictionAndActual {
	if x != nil {
		return x.PredictionAndActual
	}
	return nil
}

func (x *Record) GetSpaceKey() string {
	if x != nil {
		return x.SpaceKey
	}
	return ""
}

type PreProductionRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RecordType:
	//	*PreProductionRecord_TrainingRecord_
	//	*PreProductionRecord_ValidationRecord_
	RecordType isPreProductionRecord_RecordType `protobuf_oneof:"record_type"`
}

func (x *PreProductionRecord) Reset() {
	*x = PreProductionRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreProductionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreProductionRecord) ProtoMessage() {}

func (x *PreProductionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreProductionRecord.ProtoReflect.Descriptor instead.
func (*PreProductionRecord) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{2}
}

func (m *PreProductionRecord) GetRecordType() isPreProductionRecord_RecordType {
	if m != nil {
		return m.RecordType
	}
	return nil
}

func (x *PreProductionRecord) GetTrainingRecord() *PreProductionRecord_TrainingRecord {
	if x, ok := x.GetRecordType().(*PreProductionRecord_TrainingRecord_); ok {
		return x.TrainingRecord
	}
	return nil
}

func (x *PreProductionRecord) GetValidationRecord() *PreProductionRecord_ValidationRecord {
	if x, ok := x.GetRecordType().(*PreProductionRecord_ValidationRecord_); ok {
		return x.ValidationRecord
	}
	return nil
}

type isPreProductionRecord_RecordType interface {
	isPreProductionRecord_RecordType()
}

type PreProductionRecord_TrainingRecord_ struct {
	TrainingRecord *PreProductionRecord_TrainingRecord `protobuf:"bytes,1,opt,name=training_record,json=trainingRecord,proto3,oneof"`
}

type PreProductionRecord_ValidationRecord_ struct {
	ValidationRecord *PreProductionRecord_ValidationRecord `protobuf:"bytes,2,opt,name=validation_record,json=validationRecord,proto3,oneof"`
}

func (*PreProductionRecord_TrainingRecord_) isPreProductionRecord_RecordType() {}

func (*PreProductionRecord_ValidationRecord_) isPreProductionRecord_RecordType() {}

//
// ScoreCategorical Model is a type of model where there are two values for a prediction/actual - the numeric score and the categorical label the score maps to.
type ScoreCategorical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	Categorical string `protobuf:"bytes,1,opt,name=categorical,proto3" json:"categorical,omitempty"`
	// Deprecated: Do not use.
	Score float64 `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	// Types that are assignable to Type:
	//	*ScoreCategorical_Category_
	//	*ScoreCategorical_ScoreCategory_
	Type isScoreCategorical_Type `protobuf_oneof:"type"`
}

func (x *ScoreCategorical) Reset() {
	*x = ScoreCategorical{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreCategorical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreCategorical) ProtoMessage() {}

func (x *ScoreCategorical) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreCategorical.ProtoReflect.Descriptor instead.
func (*ScoreCategorical) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{3}
}

// Deprecated: Do not use.
func (x *ScoreCategorical) GetCategorical() string {
	if x != nil {
		return x.Categorical
	}
	return ""
}

// Deprecated: Do not use.
func (x *ScoreCategorical) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (m *ScoreCategorical) GetType() isScoreCategorical_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ScoreCategorical) GetCategory() *ScoreCategorical_Category {
	if x, ok := x.GetType().(*ScoreCategorical_Category_); ok {
		return x.Category
	}
	return nil
}

func (x *ScoreCategorical) GetScoreCategory() *ScoreCategorical_ScoreCategory {
	if x, ok := x.GetType().(*ScoreCategorical_ScoreCategory_); ok {
		return x.ScoreCategory
	}
	return nil
}

type isScoreCategorical_Type interface {
	isScoreCategorical_Type()
}

type ScoreCategorical_Category_ struct {
	Category *ScoreCategorical_Category `protobuf:"bytes,3,opt,name=category,proto3,oneof"`
}

type ScoreCategorical_ScoreCategory_ struct {
	ScoreCategory *ScoreCategorical_ScoreCategory `protobuf:"bytes,4,opt,name=score_category,json=scoreCategory,proto3,oneof"`
}

func (*ScoreCategorical_Category_) isScoreCategorical_Type() {}

func (*ScoreCategorical_ScoreCategory_) isScoreCategorical_Type() {}

//
// Label encodes both the type of model and prediction/actual value
type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*Label_Binary
	//	*Label_Categorical
	//	*Label_Numeric
	//	*Label_ScoreCategorical
	Data isLabel_Data `protobuf_oneof:"data"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{4}
}

func (m *Label) GetData() isLabel_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Label) GetBinary() bool {
	if x, ok := x.GetData().(*Label_Binary); ok {
		return x.Binary
	}
	return false
}

func (x *Label) GetCategorical() string {
	if x, ok := x.GetData().(*Label_Categorical); ok {
		return x.Categorical
	}
	return ""
}

func (x *Label) GetNumeric() float64 {
	if x, ok := x.GetData().(*Label_Numeric); ok {
		return x.Numeric
	}
	return 0
}

func (x *Label) GetScoreCategorical() *ScoreCategorical {
	if x, ok := x.GetData().(*Label_ScoreCategorical); ok {
		return x.ScoreCategorical
	}
	return nil
}

type isLabel_Data interface {
	isLabel_Data()
}

type Label_Binary struct {
	Binary bool `protobuf:"varint,1,opt,name=binary,proto3,oneof"`
}

type Label_Categorical struct {
	Categorical string `protobuf:"bytes,2,opt,name=categorical,proto3,oneof"`
}

type Label_Numeric struct {
	Numeric float64 `protobuf:"fixed64,3,opt,name=numeric,proto3,oneof"`
}

type Label_ScoreCategorical struct {
	ScoreCategorical *ScoreCategorical `protobuf:"bytes,4,opt,name=score_categorical,json=scoreCategorical,proto3,oneof"`
}

func (*Label_Binary) isLabel_Data() {}

func (*Label_Categorical) isLabel_Data() {}

func (*Label_Numeric) isLabel_Data() {}

func (*Label_ScoreCategorical) isLabel_Data() {}

//
// Prediction is the prediction-time part of the Record
type Prediction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// timestamp of the prediction.  If not set this will default to the time
	// of receipt
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	//
	// model_version is a user-defined field that will be used to group together a subset of predictions and actuals
	// for a given model_id
	ModelVersion string `protobuf:"bytes,2,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
	Label        *Label `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	//
	// features is a map of human readable model input field that will be used to group together a subset of predictions
	// for a given model_id and model_version
	Features map[string]*Value `protobuf:"bytes,4,rep,name=features,proto3" json:"features,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//
	// tags is a map of human readable model input field that will be used to group together a subset of predictions
	// for a given model_id and model_version. Separated from features in the UI and is normally used for model metadata.
	Tags map[string]*Value `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Prediction) Reset() {
	*x = Prediction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prediction) ProtoMessage() {}

func (x *Prediction) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prediction.ProtoReflect.Descriptor instead.
func (*Prediction) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{5}
}

func (x *Prediction) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Prediction) GetModelVersion() string {
	if x != nil {
		return x.ModelVersion
	}
	return ""
}

func (x *Prediction) GetLabel() *Label {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *Prediction) GetFeatures() map[string]*Value {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *Prediction) GetTags() map[string]*Value {
	if x != nil {
		return x.Tags
	}
	return nil
}

//
// Value encodes the type of the feature's value
type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*Value_String_
	//	*Value_Int
	//	*Value_Double
	//	*Value_MultiValue
	//	*Value_Embedding
	Data isValue_Data `protobuf_oneof:"data"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{6}
}

func (m *Value) GetData() isValue_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Value) GetString_() string {
	if x, ok := x.GetData().(*Value_String_); ok {
		return x.String_
	}
	return ""
}

func (x *Value) GetInt() int64 {
	if x, ok := x.GetData().(*Value_Int); ok {
		return x.Int
	}
	return 0
}

func (x *Value) GetDouble() float64 {
	if x, ok := x.GetData().(*Value_Double); ok {
		return x.Double
	}
	return 0
}

func (x *Value) GetMultiValue() *MultiValue {
	if x, ok := x.GetData().(*Value_MultiValue); ok {
		return x.MultiValue
	}
	return nil
}

func (x *Value) GetEmbedding() *Embedding {
	if x, ok := x.GetData().(*Value_Embedding); ok {
		return x.Embedding
	}
	return nil
}

type isValue_Data interface {
	isValue_Data()
}

type Value_String_ struct {
	String_ string `protobuf:"bytes,1,opt,name=string,proto3,oneof"`
}

type Value_Int struct {
	Int int64 `protobuf:"varint,2,opt,name=int,proto3,oneof"`
}

type Value_Double struct {
	Double float64 `protobuf:"fixed64,3,opt,name=double,proto3,oneof"`
}

type Value_MultiValue struct {
	MultiValue *MultiValue `protobuf:"bytes,4,opt,name=multi_value,json=multiValue,proto3,oneof"`
}

type Value_Embedding struct {
	Embedding *Embedding `protobuf:"bytes,5,opt,name=embedding,proto3,oneof"`
}

func (*Value_String_) isValue_Data() {}

func (*Value_Int) isValue_Data() {}

func (*Value_Double) isValue_Data() {}

func (*Value_MultiValue) isValue_Data() {}

func (*Value_Embedding) isValue_Data() {}

type MultiValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *MultiValue) Reset() {
	*x = MultiValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiValue) ProtoMessage() {}

func (x *MultiValue) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiValue.ProtoReflect.Descriptor instead.
func (*MultiValue) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{7}
}

func (x *MultiValue) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type Embedding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// a vector representing the values of the embedding's dimensions
	Vector []float64 `protobuf:"fixed64,1,rep,packed,name=vector,proto3" json:"vector,omitempty"`
	//
	// optional link/url to an associated image or text file
	LinkToData *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=link_to_data,json=linkToData,proto3" json:"link_to_data,omitempty"`
	//
	// RawData contains the raw text data associated with an embedding
	RawData *Embedding_RawData `protobuf:"bytes,4,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
}

func (x *Embedding) Reset() {
	*x = Embedding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Embedding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Embedding) ProtoMessage() {}

func (x *Embedding) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Embedding.ProtoReflect.Descriptor instead.
func (*Embedding) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{8}
}

func (x *Embedding) GetVector() []float64 {
	if x != nil {
		return x.Vector
	}
	return nil
}

func (x *Embedding) GetLinkToData() *wrapperspb.StringValue {
	if x != nil {
		return x.LinkToData
	}
	return nil
}

func (x *Embedding) GetRawData() *Embedding_RawData {
	if x != nil {
		return x.RawData
	}
	return nil
}

//
// Actual is the actual label part of the Record
type Actual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Label     *Label                 `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	//
	// tags is a map of human readable model input field that will be used to group together a subset of Actuals
	// for a given model_id and model_version. Separated from features in the UI and is normally used for model metadata.
	// For an Actual with a tag, if its corresponding Prediction also has a tag,
	// we save the Prediction's tag in the Conclusion record and this tag is discarded. Otherwise this tag is saved.
	Tags map[string]*Value `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Actual) Reset() {
	*x = Actual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Actual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Actual) ProtoMessage() {}

func (x *Actual) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Actual.ProtoReflect.Descriptor instead.
func (*Actual) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{9}
}

func (x *Actual) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Actual) GetLabel() *Label {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *Actual) GetTags() map[string]*Value {
	if x != nil {
		return x.Tags
	}
	return nil
}

//
// FeatureImportances contains feature importance values for a prediction
type FeatureImportances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// timestamp of the feature importance values request.  If not set this will default to the time
	// of receipt
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	//
	// model_version is a user-defined field that ensures that the feature importances are generated using the same model version as the prediction
	// for a given model_id
	ModelVersion string `protobuf:"bytes,2,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
	//
	// importances is a map of human readable model input field containing values that will be used to group together a subset of predictions
	// and feature importance values for a given model_id and model_version
	FeatureImportances map[string]float64 `protobuf:"bytes,3,rep,name=feature_importances,json=featureImportances,proto3" json:"feature_importances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *FeatureImportances) Reset() {
	*x = FeatureImportances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureImportances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureImportances) ProtoMessage() {}

func (x *FeatureImportances) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureImportances.ProtoReflect.Descriptor instead.
func (*FeatureImportances) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{10}
}

func (x *FeatureImportances) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *FeatureImportances) GetModelVersion() string {
	if x != nil {
		return x.ModelVersion
	}
	return ""
}

func (x *FeatureImportances) GetFeatureImportances() map[string]float64 {
	if x != nil {
		return x.FeatureImportances
	}
	return nil
}

//
// A pre-joined prediction and actual object (akin to a conclusion) received from
// costumers associated to a given "batch" of inferences that can be recalled by a
// human readable name
type PredictionAndActual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prediction *Prediction `protobuf:"bytes,1,opt,name=prediction,proto3" json:"prediction,omitempty"`
	Actual     *Actual     `protobuf:"bytes,2,opt,name=actual,proto3" json:"actual,omitempty"`
}

func (x *PredictionAndActual) Reset() {
	*x = PredictionAndActual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictionAndActual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictionAndActual) ProtoMessage() {}

func (x *PredictionAndActual) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictionAndActual.ProtoReflect.Descriptor instead.
func (*PredictionAndActual) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{11}
}

func (x *PredictionAndActual) GetPrediction() *Prediction {
	if x != nil {
		return x.Prediction
	}
	return nil
}

func (x *PredictionAndActual) GetActual() *Actual {
	if x != nil {
		return x.Actual
	}
	return nil
}

//
// FileHeader is always the first record in the length delimited binary files accepted by the receiver.
type FileHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment FileHeader_Environment `protobuf:"varint,1,opt,name=environment,proto3,enum=public.FileHeader_Environment" json:"environment,omitempty"`
}

func (x *FileHeader) Reset() {
	*x = FileHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileHeader) ProtoMessage() {}

func (x *FileHeader) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileHeader.ProtoReflect.Descriptor instead.
func (*FileHeader) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{12}
}

func (x *FileHeader) GetEnvironment() FileHeader_Environment {
	if x != nil {
		return x.Environment
	}
	return FileHeader_UNKNOWN
}

//
// Schema represents the information necessary to map data in some format to our Record format
type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constants *Schema_Constants `protobuf:"bytes,1,opt,name=constants,proto3" json:"constants,omitempty"`
	// Types that are assignable to Schema:
	//	*Schema_ArizeConclusions_
	//	*Schema_ArizeExplanations_
	//	*Schema_ArrowSchema_
	//	*Schema_GenericSchema_
	Schema isSchema_Schema `protobuf_oneof:"schema"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{13}
}

func (x *Schema) GetConstants() *Schema_Constants {
	if x != nil {
		return x.Constants
	}
	return nil
}

func (m *Schema) GetSchema() isSchema_Schema {
	if m != nil {
		return m.Schema
	}
	return nil
}

func (x *Schema) GetArizeConclusions() *Schema_ArizeConclusions {
	if x, ok := x.GetSchema().(*Schema_ArizeConclusions_); ok {
		return x.ArizeConclusions
	}
	return nil
}

func (x *Schema) GetArizeExplanations() *Schema_ArizeExplanations {
	if x, ok := x.GetSchema().(*Schema_ArizeExplanations_); ok {
		return x.ArizeExplanations
	}
	return nil
}

func (x *Schema) GetArrowSchema() *Schema_ArrowSchema {
	if x, ok := x.GetSchema().(*Schema_ArrowSchema_); ok {
		return x.ArrowSchema
	}
	return nil
}

func (x *Schema) GetGenericSchema() *Schema_GenericSchema {
	if x, ok := x.GetSchema().(*Schema_GenericSchema_); ok {
		return x.GenericSchema
	}
	return nil
}

type isSchema_Schema interface {
	isSchema_Schema()
}

type Schema_ArizeConclusions_ struct {
	ArizeConclusions *Schema_ArizeConclusions `protobuf:"bytes,2,opt,name=arize_conclusions,json=arizeConclusions,proto3,oneof"`
}

type Schema_ArizeExplanations_ struct {
	ArizeExplanations *Schema_ArizeExplanations `protobuf:"bytes,3,opt,name=arize_explanations,json=arizeExplanations,proto3,oneof"`
}

type Schema_ArrowSchema_ struct {
	ArrowSchema *Schema_ArrowSchema `protobuf:"bytes,4,opt,name=arrow_schema,json=arrowSchema,proto3,oneof"`
}

type Schema_GenericSchema_ struct {
	GenericSchema *Schema_GenericSchema `protobuf:"bytes,5,opt,name=generic_schema,json=genericSchema,proto3,oneof"`
}

func (*Schema_ArizeConclusions_) isSchema_Schema() {}

func (*Schema_ArizeExplanations_) isSchema_Schema() {}

func (*Schema_ArrowSchema_) isSchema_Schema() {}

func (*Schema_GenericSchema_) isSchema_Schema() {}

//
// ArrowFileUploadResponse is the response body for the ArrowFileUpload receiver endpoint.
type ArrowFileUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// error field is set if any error was encountered during the file upload request. If request was successful this field
	// is an empty string
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// the URI to the real time ingestion page that will show real time ingestion stats on the records sent in via the file upload
	// this field is empty if an error occurred during the request.
	RealTimeIngestionUri string `protobuf:"bytes,2,opt,name=real_time_ingestion_uri,json=realTimeIngestionUri,proto3" json:"real_time_ingestion_uri,omitempty"`
}

func (x *ArrowFileUploadResponse) Reset() {
	*x = ArrowFileUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrowFileUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrowFileUploadResponse) ProtoMessage() {}

func (x *ArrowFileUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrowFileUploadResponse.ProtoReflect.Descriptor instead.
func (*ArrowFileUploadResponse) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{14}
}

func (x *ArrowFileUploadResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ArrowFileUploadResponse) GetRealTimeIngestionUri() string {
	if x != nil {
		return x.RealTimeIngestionUri
	}
	return ""
}

type PreProductionRecord_ValidationRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Unique identifier for a cohort of validation records
	BatchId string  `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Record  *Record `protobuf:"bytes,2,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *PreProductionRecord_ValidationRecord) Reset() {
	*x = PreProductionRecord_ValidationRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreProductionRecord_ValidationRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreProductionRecord_ValidationRecord) ProtoMessage() {}

func (x *PreProductionRecord_ValidationRecord) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreProductionRecord_ValidationRecord.ProtoReflect.Descriptor instead.
func (*PreProductionRecord_ValidationRecord) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{2, 0}
}

func (x *PreProductionRecord_ValidationRecord) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *PreProductionRecord_ValidationRecord) GetRecord() *Record {
	if x != nil {
		return x.Record
	}
	return nil
}

//
// Thin wrapper around a Record to be explicit on Pre-Production Records
type PreProductionRecord_TrainingRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record *Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *PreProductionRecord_TrainingRecord) Reset() {
	*x = PreProductionRecord_TrainingRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreProductionRecord_TrainingRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreProductionRecord_TrainingRecord) ProtoMessage() {}

func (x *PreProductionRecord_TrainingRecord) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreProductionRecord_TrainingRecord.ProtoReflect.Descriptor instead.
func (*PreProductionRecord_TrainingRecord) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{2, 1}
}

func (x *PreProductionRecord_TrainingRecord) GetRecord() *Record {
	if x != nil {
		return x.Record
	}
	return nil
}

type ScoreCategorical_Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *ScoreCategorical_Category) Reset() {
	*x = ScoreCategorical_Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreCategorical_Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreCategorical_Category) ProtoMessage() {}

func (x *ScoreCategorical_Category) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreCategorical_Category.ProtoReflect.Descriptor instead.
func (*ScoreCategorical_Category) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ScoreCategorical_Category) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type ScoreCategorical_ScoreCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category        string    `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Score           float64   `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	NumericSequence []float64 `protobuf:"fixed64,3,rep,packed,name=numeric_sequence,json=numericSequence,proto3" json:"numeric_sequence,omitempty"`
}

func (x *ScoreCategorical_ScoreCategory) Reset() {
	*x = ScoreCategorical_ScoreCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoreCategorical_ScoreCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreCategorical_ScoreCategory) ProtoMessage() {}

func (x *ScoreCategorical_ScoreCategory) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreCategorical_ScoreCategory.ProtoReflect.Descriptor instead.
func (*ScoreCategorical_ScoreCategory) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{3, 1}
}

func (x *ScoreCategorical_ScoreCategory) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ScoreCategorical_ScoreCategory) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ScoreCategorical_ScoreCategory) GetNumericSequence() []float64 {
	if x != nil {
		return x.NumericSequence
	}
	return nil
}

type Embedding_RawData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*Embedding_RawData_TokenArray
	Type isEmbedding_RawData_Type `protobuf_oneof:"type"`
}

func (x *Embedding_RawData) Reset() {
	*x = Embedding_RawData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Embedding_RawData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Embedding_RawData) ProtoMessage() {}

func (x *Embedding_RawData) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Embedding_RawData.ProtoReflect.Descriptor instead.
func (*Embedding_RawData) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{8, 0}
}

func (m *Embedding_RawData) GetType() isEmbedding_RawData_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Embedding_RawData) GetTokenArray() *Embedding_TokenArray {
	if x, ok := x.GetType().(*Embedding_RawData_TokenArray); ok {
		return x.TokenArray
	}
	return nil
}

type isEmbedding_RawData_Type interface {
	isEmbedding_RawData_Type()
}

type Embedding_RawData_TokenArray struct {
	//
	// If a token array of only one token is sent, we will infer that it is a piece of text
	// and it will show in the UI as text, not token array
	TokenArray *Embedding_TokenArray `protobuf:"bytes,2,opt,name=tokenArray,proto3,oneof"`
}

func (*Embedding_RawData_TokenArray) isEmbedding_RawData_Type() {}

//
// TokenArray contains list of strings
type Embedding_TokenArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokens []string `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *Embedding_TokenArray) Reset() {
	*x = Embedding_TokenArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Embedding_TokenArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Embedding_TokenArray) ProtoMessage() {}

func (x *Embedding_TokenArray) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Embedding_TokenArray.ProtoReflect.Descriptor instead.
func (*Embedding_TokenArray) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{8, 1}
}

func (x *Embedding_TokenArray) GetTokens() []string {
	if x != nil {
		return x.Tokens
	}
	return nil
}

//
// Constants represent the high level metadata which is constant across rows within a tabular schema (and which will
// often not be repeated in each row of user data) and is only specified once
type Schema_Constants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelId      string             `protobuf:"bytes,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	ModelVersion string             `protobuf:"bytes,2,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
	BatchId      string             `protobuf:"bytes,3,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Environment  Schema_Environment `protobuf:"varint,4,opt,name=environment,proto3,enum=public.Schema_Environment" json:"environment,omitempty"`
	ModelType    Schema_ModelType   `protobuf:"varint,5,opt,name=model_type,json=modelType,proto3,enum=public.Schema_ModelType" json:"model_type,omitempty"`
}

func (x *Schema_Constants) Reset() {
	*x = Schema_Constants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema_Constants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema_Constants) ProtoMessage() {}

func (x *Schema_Constants) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema_Constants.ProtoReflect.Descriptor instead.
func (*Schema_Constants) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{13, 0}
}

func (x *Schema_Constants) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *Schema_Constants) GetModelVersion() string {
	if x != nil {
		return x.ModelVersion
	}
	return ""
}

func (x *Schema_Constants) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *Schema_Constants) GetEnvironment() Schema_Environment {
	if x != nil {
		return x.Environment
	}
	return Schema_UNKNOWN_ENVIRONMENT
}

func (x *Schema_Constants) GetModelType() Schema_ModelType {
	if x != nil {
		return x.ModelType
	}
	return Schema_UNKNOWN_MODELTYPE
}

// ArizeConclusions schema is just a marker since we dont need any real additional info to make sense of canonical conclusion records
type Schema_ArizeConclusions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Schema_ArizeConclusions) Reset() {
	*x = Schema_ArizeConclusions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema_ArizeConclusions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema_ArizeConclusions) ProtoMessage() {}

func (x *Schema_ArizeConclusions) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema_ArizeConclusions.ProtoReflect.Descriptor instead.
func (*Schema_ArizeConclusions) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{13, 1}
}

// ArizeExplanations schema is just a marker since we dont need any real additional info to make sense of canonical conclusion records
type Schema_ArizeExplanations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Schema_ArizeExplanations) Reset() {
	*x = Schema_ArizeExplanations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema_ArizeExplanations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema_ArizeExplanations) ProtoMessage() {}

func (x *Schema_ArizeExplanations) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema_ArizeExplanations.ProtoReflect.Descriptor instead.
func (*Schema_ArizeExplanations) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{13, 2}
}

// ArrowSchema is used for ArrowIPC files. ArrowIPC files are columnar datastructures, and when output
// from pandas represent the same 2-dimensional structure as a DataFrame. Though ArrowIPC supports struct columns,
// pandas will not output an Arrow file that uses them, so we expect a flat schema
type Schema_ArrowSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredictionIdColumnName    string   `protobuf:"bytes,1,opt,name=prediction_id_column_name,json=predictionIdColumnName,proto3" json:"prediction_id_column_name,omitempty"`
	FeatureColumnNames        []string `protobuf:"bytes,2,rep,name=feature_column_names,json=featureColumnNames,proto3" json:"feature_column_names,omitempty"`
	TimestampColumnName       string   `protobuf:"bytes,3,opt,name=timestamp_column_name,json=timestampColumnName,proto3" json:"timestamp_column_name,omitempty"`
	PredictionLabelColumnName string   `protobuf:"bytes,4,opt,name=prediction_label_column_name,json=predictionLabelColumnName,proto3" json:"prediction_label_column_name,omitempty"`
	PredictionScoreColumnName string   `protobuf:"bytes,5,opt,name=prediction_score_column_name,json=predictionScoreColumnName,proto3" json:"prediction_score_column_name,omitempty"`
	ActualLabelColumnName     string   `protobuf:"bytes,6,opt,name=actual_label_column_name,json=actualLabelColumnName,proto3" json:"actual_label_column_name,omitempty"`
	ActualScoreColumnName     string   `protobuf:"bytes,7,opt,name=actual_score_column_name,json=actualScoreColumnName,proto3" json:"actual_score_column_name,omitempty"`
	// key is the feature name, value is the name of the column that contains the shap values for this feature
	ShapValuesColumnNames map[string]string `protobuf:"bytes,8,rep,name=shap_values_column_names,json=shapValuesColumnNames,proto3" json:"shap_values_column_names,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TagColumnNames        []string          `protobuf:"bytes,9,rep,name=tag_column_names,json=tagColumnNames,proto3" json:"tag_column_names,omitempty"`
	// numeric_sequence lets user attach a sequence of numeric values to each record in additional to the scalar score.
	// the actual_numeric_sequence is primarily used for NDCG calculations
	ActualNumericSequenceColumnName string                         `protobuf:"bytes,10,opt,name=actual_numeric_sequence_column_name,json=actualNumericSequenceColumnName,proto3" json:"actual_numeric_sequence_column_name,omitempty"`
	EmbeddingFeatureColumnNames     []*Schema_EmbeddingColumnNames `protobuf:"bytes,11,rep,name=embedding_feature_column_names,json=embeddingFeatureColumnNames,proto3" json:"embedding_feature_column_names,omitempty"`
}

func (x *Schema_ArrowSchema) Reset() {
	*x = Schema_ArrowSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema_ArrowSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema_ArrowSchema) ProtoMessage() {}

func (x *Schema_ArrowSchema) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema_ArrowSchema.ProtoReflect.Descriptor instead.
func (*Schema_ArrowSchema) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{13, 3}
}

func (x *Schema_ArrowSchema) GetPredictionIdColumnName() string {
	if x != nil {
		return x.PredictionIdColumnName
	}
	return ""
}

func (x *Schema_ArrowSchema) GetFeatureColumnNames() []string {
	if x != nil {
		return x.FeatureColumnNames
	}
	return nil
}

func (x *Schema_ArrowSchema) GetTimestampColumnName() string {
	if x != nil {
		return x.TimestampColumnName
	}
	return ""
}

func (x *Schema_ArrowSchema) GetPredictionLabelColumnName() string {
	if x != nil {
		return x.PredictionLabelColumnName
	}
	return ""
}

func (x *Schema_ArrowSchema) GetPredictionScoreColumnName() string {
	if x != nil {
		return x.PredictionScoreColumnName
	}
	return ""
}

func (x *Schema_ArrowSchema) GetActualLabelColumnName() string {
	if x != nil {
		return x.ActualLabelColumnName
	}
	return ""
}

func (x *Schema_ArrowSchema) GetActualScoreColumnName() string {
	if x != nil {
		return x.ActualScoreColumnName
	}
	return ""
}

func (x *Schema_ArrowSchema) GetShapValuesColumnNames() map[string]string {
	if x != nil {
		return x.ShapValuesColumnNames
	}
	return nil
}

func (x *Schema_ArrowSchema) GetTagColumnNames() []string {
	if x != nil {
		return x.TagColumnNames
	}
	return nil
}

func (x *Schema_ArrowSchema) GetActualNumericSequenceColumnName() string {
	if x != nil {
		return x.ActualNumericSequenceColumnName
	}
	return ""
}

func (x *Schema_ArrowSchema) GetEmbeddingFeatureColumnNames() []*Schema_EmbeddingColumnNames {
	if x != nil {
		return x.EmbeddingFeatureColumnNames
	}
	return nil
}

type Schema_EmbeddingColumnNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VectorColumnName     string `protobuf:"bytes,1,opt,name=vector_column_name,json=vectorColumnName,proto3" json:"vector_column_name,omitempty"`
	DataColumnName       string `protobuf:"bytes,2,opt,name=data_column_name,json=dataColumnName,proto3" json:"data_column_name,omitempty"`
	LinkToDataColumnName string `protobuf:"bytes,3,opt,name=link_to_data_column_name,json=linkToDataColumnName,proto3" json:"link_to_data_column_name,omitempty"`
}

func (x *Schema_EmbeddingColumnNames) Reset() {
	*x = Schema_EmbeddingColumnNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema_EmbeddingColumnNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema_EmbeddingColumnNames) ProtoMessage() {}

func (x *Schema_EmbeddingColumnNames) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema_EmbeddingColumnNames.ProtoReflect.Descriptor instead.
func (*Schema_EmbeddingColumnNames) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{13, 4}
}

func (x *Schema_EmbeddingColumnNames) GetVectorColumnName() string {
	if x != nil {
		return x.VectorColumnName
	}
	return ""
}

func (x *Schema_EmbeddingColumnNames) GetDataColumnName() string {
	if x != nil {
		return x.DataColumnName
	}
	return ""
}

func (x *Schema_EmbeddingColumnNames) GetLinkToDataColumnName() string {
	if x != nil {
		return x.LinkToDataColumnName
	}
	return ""
}

// GenericSchema allows users to specify field descriptors within a generic and potentially nested data object (e.g. JSON object)
// to flexibly define a custom schema for their model data.
type Schema_GenericSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredictionId    *Schema_GenericSchema_FieldDescriptor      `protobuf:"bytes,1,opt,name=prediction_id,json=predictionId,proto3" json:"prediction_id,omitempty"`
	Features        *Schema_GenericSchema_GroupFieldDescriptor `protobuf:"bytes,2,opt,name=features,proto3" json:"features,omitempty"`
	Timestamp       *Schema_GenericSchema_FieldDescriptor      `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PredictionLabel *Schema_GenericSchema_FieldDescriptor      `protobuf:"bytes,4,opt,name=prediction_label,json=predictionLabel,proto3" json:"prediction_label,omitempty"`
	PredictionScore *Schema_GenericSchema_FieldDescriptor      `protobuf:"bytes,5,opt,name=prediction_score,json=predictionScore,proto3" json:"prediction_score,omitempty"`
	ActualLabel     *Schema_GenericSchema_FieldDescriptor      `protobuf:"bytes,6,opt,name=actual_label,json=actualLabel,proto3" json:"actual_label,omitempty"`
	ActualScore     *Schema_GenericSchema_FieldDescriptor      `protobuf:"bytes,7,opt,name=actual_score,json=actualScore,proto3" json:"actual_score,omitempty"`
	// shap_values must match features names or else they will be discarded
	ShapValues       *Schema_GenericSchema_GroupFieldDescriptor `protobuf:"bytes,8,opt,name=shap_values,json=shapValues,proto3" json:"shap_values,omitempty"`
	Tags             *Schema_GenericSchema_GroupFieldDescriptor `protobuf:"bytes,9,opt,name=tags,proto3" json:"tags,omitempty"`
	ModelEnvironment *Schema_GenericSchema_FieldDescriptor      `protobuf:"bytes,10,opt,name=model_environment,json=modelEnvironment,proto3" json:"model_environment,omitempty"`
	ModelVersion     *Schema_GenericSchema_FieldDescriptor      `protobuf:"bytes,11,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
	BatchId          *Schema_GenericSchema_FieldDescriptor      `protobuf:"bytes,12,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// List of fields to not ignore/not ingest
	Exclude *Schema_GenericSchema_FieldDescriptor `protobuf:"bytes,13,opt,name=exclude,proto3" json:"exclude,omitempty"`
}

func (x *Schema_GenericSchema) Reset() {
	*x = Schema_GenericSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema_GenericSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema_GenericSchema) ProtoMessage() {}

func (x *Schema_GenericSchema) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema_GenericSchema.ProtoReflect.Descriptor instead.
func (*Schema_GenericSchema) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{13, 5}
}

func (x *Schema_GenericSchema) GetPredictionId() *Schema_GenericSchema_FieldDescriptor {
	if x != nil {
		return x.PredictionId
	}
	return nil
}

func (x *Schema_GenericSchema) GetFeatures() *Schema_GenericSchema_GroupFieldDescriptor {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *Schema_GenericSchema) GetTimestamp() *Schema_GenericSchema_FieldDescriptor {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Schema_GenericSchema) GetPredictionLabel() *Schema_GenericSchema_FieldDescriptor {
	if x != nil {
		return x.PredictionLabel
	}
	return nil
}

func (x *Schema_GenericSchema) GetPredictionScore() *Schema_GenericSchema_FieldDescriptor {
	if x != nil {
		return x.PredictionScore
	}
	return nil
}

func (x *Schema_GenericSchema) GetActualLabel() *Schema_GenericSchema_FieldDescriptor {
	if x != nil {
		return x.ActualLabel
	}
	return nil
}

func (x *Schema_GenericSchema) GetActualScore() *Schema_GenericSchema_FieldDescriptor {
	if x != nil {
		return x.ActualScore
	}
	return nil
}

func (x *Schema_GenericSchema) GetShapValues() *Schema_GenericSchema_GroupFieldDescriptor {
	if x != nil {
		return x.ShapValues
	}
	return nil
}

func (x *Schema_GenericSchema) GetTags() *Schema_GenericSchema_GroupFieldDescriptor {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Schema_GenericSchema) GetModelEnvironment() *Schema_GenericSchema_FieldDescriptor {
	if x != nil {
		return x.ModelEnvironment
	}
	return nil
}

func (x *Schema_GenericSchema) GetModelVersion() *Schema_GenericSchema_FieldDescriptor {
	if x != nil {
		return x.ModelVersion
	}
	return nil
}

func (x *Schema_GenericSchema) GetBatchId() *Schema_GenericSchema_FieldDescriptor {
	if x != nil {
		return x.BatchId
	}
	return nil
}

func (x *Schema_GenericSchema) GetExclude() *Schema_GenericSchema_FieldDescriptor {
	if x != nil {
		return x.Exclude
	}
	return nil
}

// FieldDescriptor specifies the location of a field
type Schema_GenericSchema_FieldDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Properties []string `protobuf:"bytes,1,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *Schema_GenericSchema_FieldDescriptor) Reset() {
	*x = Schema_GenericSchema_FieldDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema_GenericSchema_FieldDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema_GenericSchema_FieldDescriptor) ProtoMessage() {}

func (x *Schema_GenericSchema_FieldDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema_GenericSchema_FieldDescriptor.ProtoReflect.Descriptor instead.
func (*Schema_GenericSchema_FieldDescriptor) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{13, 5, 0}
}

func (x *Schema_GenericSchema_FieldDescriptor) GetProperties() []string {
	if x != nil {
		return x.Properties
	}
	return nil
}

// GroupFieldDescriptor allows fields to be dynamically identified using a capture group string
type Schema_GenericSchema_GroupFieldDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Properties []string `protobuf:"bytes,1,rep,name=properties,proto3" json:"properties,omitempty"`
	// represents a capture group string used to extract a dimension name from a data field name
	// e.g. feature[0-9]* would extract "feature123" from "product1_feature123" or "feature123" from "feature123_randomhashsuffix"
	CaptureGroup string `protobuf:"bytes,2,opt,name=capture_group,json=captureGroup,proto3" json:"capture_group,omitempty"`
}

func (x *Schema_GenericSchema_GroupFieldDescriptor) Reset() {
	*x = Schema_GenericSchema_GroupFieldDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receiver_protocol_public_public_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema_GenericSchema_GroupFieldDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema_GenericSchema_GroupFieldDescriptor) ProtoMessage() {}

func (x *Schema_GenericSchema_GroupFieldDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_receiver_protocol_public_public_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema_GenericSchema_GroupFieldDescriptor.ProtoReflect.Descriptor instead.
func (*Schema_GenericSchema_GroupFieldDescriptor) Descriptor() ([]byte, []int) {
	return file_receiver_protocol_public_public_proto_rawDescGZIP(), []int{13, 5, 1}
}

func (x *Schema_GenericSchema_GroupFieldDescriptor) GetProperties() []string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Schema_GenericSchema_GroupFieldDescriptor) GetCaptureGroup() string {
	if x != nil {
		return x.CaptureGroup
	}
	return ""
}

var File_receiver_protocol_public_public_proto protoreflect.FileDescriptor

var file_receiver_protocol_public_public_proto_rawDesc = []byte{
	0x0a, 0x25, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd3, 0x01, 0x0a, 0x0a, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x2d, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xa6, 0x03, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x2d, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x41, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x52, 0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x13,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x12, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x15, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x41,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x13, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08,
	0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22,
	0xe9, 0x02, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x55, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0e,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x5b,
	0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x55, 0x0a, 0x10, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x1a, 0x38, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x82, 0x03, 0x0a, 0x10,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c,
	0x12, 0x24, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x3f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x4f, 0x0a, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x1a, 0x26, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x1a, 0x6c, 0x0a, 0x0d, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xb2, 0x01, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x06, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x10, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x06, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x94, 0x03, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x4a, 0x0a, 0x0d, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc1, 0x01, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x12, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x03, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x35,
	0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x09, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x24, 0x0a, 0x0a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x9e, 0x02, 0x0a, 0x09, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x0c,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x08,
	0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x57, 0x0a, 0x07, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a,
	0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48,
	0x00, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x1a, 0x24, 0x0a, 0x0a, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xdd, 0x01, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x2e,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a,
	0x46, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9f, 0x02, 0x0a, 0x12, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a,
	0x13, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x1a, 0x45, 0x0a, 0x17, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x71, 0x0a, 0x13, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x12, 0x32, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x41, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x52, 0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x22, 0x98, 0x01, 0x0a,
	0x0a, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x48, 0x0a,
	0x0b, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x41,
	0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x44, 0x55,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x22, 0xe1, 0x17, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x11, 0x61, 0x72,
	0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x41, 0x72, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x10, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x12, 0x61, 0x72,
	0x69, 0x7a, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x41, 0x72, 0x69, 0x7a, 0x65, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x11, 0x61, 0x72, 0x69, 0x7a,
	0x65, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a,
	0x0c, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x48,
	0x00, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x45,
	0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0xdd, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x3c,
	0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x12, 0x0a, 0x10, 0x41, 0x72, 0x69, 0x7a, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x13, 0x0a, 0x11, 0x41, 0x72, 0x69,
	0x7a, 0x65, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xbe,
	0x06, 0x0a, 0x0b, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x39,
	0x0a, 0x19, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3f, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x6e, 0x0a, 0x18, 0x73, 0x68, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x73, 0x68,
	0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x4c, 0x0a,
	0x23, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x1e, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x1b, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x48, 0x0a, 0x1a, 0x53, 0x68, 0x61, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0xa6, 0x01, 0x0a, 0x14, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x18, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xbb, 0x09, 0x0a, 0x0d, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x51, 0x0a, 0x0d, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52,
	0x0c, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4d, 0x0a,
	0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x57, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x52, 0x0f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x57, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x4f, 0x0a, 0x0c, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x52, 0x0a, 0x0b,
	0x73, 0x68, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x45, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x59, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x52, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x51, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x46,
	0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x1a, 0x31, 0x0a, 0x0f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x5b, 0x0a, 0x14, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x54, 0x0a, 0x0b, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x22, 0x63, 0x0a, 0x09,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x43,
	0x4f, 0x52, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x10,
	0x04, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x66, 0x0a, 0x17, 0x41,
	0x72, 0x72, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x17,
	0x72, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72,
	0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x72, 0x69, 0x42, 0x4f, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x72, 0x69, 0x7a, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x72, 0x69, 0x7a, 0x65, 0x2d, 0x61, 0x69, 0x2f, 0x61,
	0x72, 0x69, 0x7a, 0x65, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_receiver_protocol_public_public_proto_rawDescOnce sync.Once
	file_receiver_protocol_public_public_proto_rawDescData = file_receiver_protocol_public_public_proto_rawDesc
)

func file_receiver_protocol_public_public_proto_rawDescGZIP() []byte {
	file_receiver_protocol_public_public_proto_rawDescOnce.Do(func() {
		file_receiver_protocol_public_public_proto_rawDescData = protoimpl.X.CompressGZIP(file_receiver_protocol_public_public_proto_rawDescData)
	})
	return file_receiver_protocol_public_public_proto_rawDescData
}

var file_receiver_protocol_public_public_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_receiver_protocol_public_public_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_receiver_protocol_public_public_proto_goTypes = []interface{}{
	(FileHeader_Environment)(0),                  // 0: public.FileHeader.Environment
	(Schema_Environment)(0),                      // 1: public.Schema.Environment
	(Schema_ModelType)(0),                        // 2: public.Schema.ModelType
	(*BulkRecord)(nil),                           // 3: public.BulkRecord
	(*Record)(nil),                               // 4: public.Record
	(*PreProductionRecord)(nil),                  // 5: public.PreProductionRecord
	(*ScoreCategorical)(nil),                     // 6: public.ScoreCategorical
	(*Label)(nil),                                // 7: public.Label
	(*Prediction)(nil),                           // 8: public.Prediction
	(*Value)(nil),                                // 9: public.Value
	(*MultiValue)(nil),                           // 10: public.MultiValue
	(*Embedding)(nil),                            // 11: public.Embedding
	(*Actual)(nil),                               // 12: public.Actual
	(*FeatureImportances)(nil),                   // 13: public.FeatureImportances
	(*PredictionAndActual)(nil),                  // 14: public.PredictionAndActual
	(*FileHeader)(nil),                           // 15: public.FileHeader
	(*Schema)(nil),                               // 16: public.Schema
	(*ArrowFileUploadResponse)(nil),              // 17: public.ArrowFileUploadResponse
	(*PreProductionRecord_ValidationRecord)(nil), // 18: public.PreProductionRecord.ValidationRecord
	(*PreProductionRecord_TrainingRecord)(nil),   // 19: public.PreProductionRecord.TrainingRecord
	(*ScoreCategorical_Category)(nil),            // 20: public.ScoreCategorical.Category
	(*ScoreCategorical_ScoreCategory)(nil),       // 21: public.ScoreCategorical.ScoreCategory
	nil,                                          // 22: public.Prediction.FeaturesEntry
	nil,                                          // 23: public.Prediction.TagsEntry
	(*Embedding_RawData)(nil),                    // 24: public.Embedding.RawData
	(*Embedding_TokenArray)(nil),                 // 25: public.Embedding.TokenArray
	nil,                                          // 26: public.Actual.TagsEntry
	nil,                                          // 27: public.FeatureImportances.FeatureImportancesEntry
	(*Schema_Constants)(nil),                     // 28: public.Schema.Constants
	(*Schema_ArizeConclusions)(nil),              // 29: public.Schema.ArizeConclusions
	(*Schema_ArizeExplanations)(nil),             // 30: public.Schema.ArizeExplanations
	(*Schema_ArrowSchema)(nil),                   // 31: public.Schema.ArrowSchema
	(*Schema_EmbeddingColumnNames)(nil),          // 32: public.Schema.EmbeddingColumnNames
	(*Schema_GenericSchema)(nil),                 // 33: public.Schema.GenericSchema
	nil,                                          // 34: public.Schema.ArrowSchema.ShapValuesColumnNamesEntry
	(*Schema_GenericSchema_FieldDescriptor)(nil),      // 35: public.Schema.GenericSchema.FieldDescriptor
	(*Schema_GenericSchema_GroupFieldDescriptor)(nil), // 36: public.Schema.GenericSchema.GroupFieldDescriptor
	(*timestamppb.Timestamp)(nil),                     // 37: google.protobuf.Timestamp
	(*wrapperspb.StringValue)(nil),                    // 38: google.protobuf.StringValue
}
var file_receiver_protocol_public_public_proto_depIdxs = []int32{
	4,  // 0: public.BulkRecord.records:type_name -> public.Record
	8,  // 1: public.Record.prediction:type_name -> public.Prediction
	12, // 2: public.Record.actual:type_name -> public.Actual
	13, // 3: public.Record.feature_importances:type_name -> public.FeatureImportances
	14, // 4: public.Record.prediction_and_actual:type_name -> public.PredictionAndActual
	19, // 5: public.PreProductionRecord.training_record:type_name -> public.PreProductionRecord.TrainingRecord
	18, // 6: public.PreProductionRecord.validation_record:type_name -> public.PreProductionRecord.ValidationRecord
	20, // 7: public.ScoreCategorical.category:type_name -> public.ScoreCategorical.Category
	21, // 8: public.ScoreCategorical.score_category:type_name -> public.ScoreCategorical.ScoreCategory
	6,  // 9: public.Label.score_categorical:type_name -> public.ScoreCategorical
	37, // 10: public.Prediction.timestamp:type_name -> google.protobuf.Timestamp
	7,  // 11: public.Prediction.label:type_name -> public.Label
	22, // 12: public.Prediction.features:type_name -> public.Prediction.FeaturesEntry
	23, // 13: public.Prediction.tags:type_name -> public.Prediction.TagsEntry
	10, // 14: public.Value.multi_value:type_name -> public.MultiValue
	11, // 15: public.Value.embedding:type_name -> public.Embedding
	38, // 16: public.Embedding.link_to_data:type_name -> google.protobuf.StringValue
	24, // 17: public.Embedding.raw_data:type_name -> public.Embedding.RawData
	37, // 18: public.Actual.timestamp:type_name -> google.protobuf.Timestamp
	7,  // 19: public.Actual.label:type_name -> public.Label
	26, // 20: public.Actual.tags:type_name -> public.Actual.TagsEntry
	37, // 21: public.FeatureImportances.timestamp:type_name -> google.protobuf.Timestamp
	27, // 22: public.FeatureImportances.feature_importances:type_name -> public.FeatureImportances.FeatureImportancesEntry
	8,  // 23: public.PredictionAndActual.prediction:type_name -> public.Prediction
	12, // 24: public.PredictionAndActual.actual:type_name -> public.Actual
	0,  // 25: public.FileHeader.environment:type_name -> public.FileHeader.Environment
	28, // 26: public.Schema.constants:type_name -> public.Schema.Constants
	29, // 27: public.Schema.arize_conclusions:type_name -> public.Schema.ArizeConclusions
	30, // 28: public.Schema.arize_explanations:type_name -> public.Schema.ArizeExplanations
	31, // 29: public.Schema.arrow_schema:type_name -> public.Schema.ArrowSchema
	33, // 30: public.Schema.generic_schema:type_name -> public.Schema.GenericSchema
	4,  // 31: public.PreProductionRecord.ValidationRecord.record:type_name -> public.Record
	4,  // 32: public.PreProductionRecord.TrainingRecord.record:type_name -> public.Record
	9,  // 33: public.Prediction.FeaturesEntry.value:type_name -> public.Value
	9,  // 34: public.Prediction.TagsEntry.value:type_name -> public.Value
	25, // 35: public.Embedding.RawData.tokenArray:type_name -> public.Embedding.TokenArray
	9,  // 36: public.Actual.TagsEntry.value:type_name -> public.Value
	1,  // 37: public.Schema.Constants.environment:type_name -> public.Schema.Environment
	2,  // 38: public.Schema.Constants.model_type:type_name -> public.Schema.ModelType
	34, // 39: public.Schema.ArrowSchema.shap_values_column_names:type_name -> public.Schema.ArrowSchema.ShapValuesColumnNamesEntry
	32, // 40: public.Schema.ArrowSchema.embedding_feature_column_names:type_name -> public.Schema.EmbeddingColumnNames
	35, // 41: public.Schema.GenericSchema.prediction_id:type_name -> public.Schema.GenericSchema.FieldDescriptor
	36, // 42: public.Schema.GenericSchema.features:type_name -> public.Schema.GenericSchema.GroupFieldDescriptor
	35, // 43: public.Schema.GenericSchema.timestamp:type_name -> public.Schema.GenericSchema.FieldDescriptor
	35, // 44: public.Schema.GenericSchema.prediction_label:type_name -> public.Schema.GenericSchema.FieldDescriptor
	35, // 45: public.Schema.GenericSchema.prediction_score:type_name -> public.Schema.GenericSchema.FieldDescriptor
	35, // 46: public.Schema.GenericSchema.actual_label:type_name -> public.Schema.GenericSchema.FieldDescriptor
	35, // 47: public.Schema.GenericSchema.actual_score:type_name -> public.Schema.GenericSchema.FieldDescriptor
	36, // 48: public.Schema.GenericSchema.shap_values:type_name -> public.Schema.GenericSchema.GroupFieldDescriptor
	36, // 49: public.Schema.GenericSchema.tags:type_name -> public.Schema.GenericSchema.GroupFieldDescriptor
	35, // 50: public.Schema.GenericSchema.model_environment:type_name -> public.Schema.GenericSchema.FieldDescriptor
	35, // 51: public.Schema.GenericSchema.model_version:type_name -> public.Schema.GenericSchema.FieldDescriptor
	35, // 52: public.Schema.GenericSchema.batch_id:type_name -> public.Schema.GenericSchema.FieldDescriptor
	35, // 53: public.Schema.GenericSchema.exclude:type_name -> public.Schema.GenericSchema.FieldDescriptor
	54, // [54:54] is the sub-list for method output_type
	54, // [54:54] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_receiver_protocol_public_public_proto_init() }
func file_receiver_protocol_public_public_proto_init() {
	if File_receiver_protocol_public_public_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_receiver_protocol_public_public_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreProductionRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreCategorical); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prediction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Embedding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Actual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureImportances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictionAndActual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrowFileUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreProductionRecord_ValidationRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreProductionRecord_TrainingRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreCategorical_Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoreCategorical_ScoreCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Embedding_RawData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Embedding_TokenArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema_Constants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema_ArizeConclusions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema_ArizeExplanations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema_ArrowSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema_EmbeddingColumnNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema_GenericSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema_GenericSchema_FieldDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receiver_protocol_public_public_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema_GenericSchema_GroupFieldDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_receiver_protocol_public_public_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*PreProductionRecord_TrainingRecord_)(nil),
		(*PreProductionRecord_ValidationRecord_)(nil),
	}
	file_receiver_protocol_public_public_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ScoreCategorical_Category_)(nil),
		(*ScoreCategorical_ScoreCategory_)(nil),
	}
	file_receiver_protocol_public_public_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Label_Binary)(nil),
		(*Label_Categorical)(nil),
		(*Label_Numeric)(nil),
		(*Label_ScoreCategorical)(nil),
	}
	file_receiver_protocol_public_public_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Value_String_)(nil),
		(*Value_Int)(nil),
		(*Value_Double)(nil),
		(*Value_MultiValue)(nil),
		(*Value_Embedding)(nil),
	}
	file_receiver_protocol_public_public_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*Schema_ArizeConclusions_)(nil),
		(*Schema_ArizeExplanations_)(nil),
		(*Schema_ArrowSchema_)(nil),
		(*Schema_GenericSchema_)(nil),
	}
	file_receiver_protocol_public_public_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*Embedding_RawData_TokenArray)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_receiver_protocol_public_public_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_receiver_protocol_public_public_proto_goTypes,
		DependencyIndexes: file_receiver_protocol_public_public_proto_depIdxs,
		EnumInfos:         file_receiver_protocol_public_public_proto_enumTypes,
		MessageInfos:      file_receiver_protocol_public_public_proto_msgTypes,
	}.Build()
	File_receiver_protocol_public_public_proto = out.File
	file_receiver_protocol_public_public_proto_rawDesc = nil
	file_receiver_protocol_public_public_proto_goTypes = nil
	file_receiver_protocol_public_public_proto_depIdxs = nil
}
